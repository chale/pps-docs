extends layout

block content
  nav.nav#sidebar
    ul
      li
        a(href="#auth") Authorization
        ul
          li: a(href="#auth_overview") Overview
          li: a(href="#auth_getr") Get Request Token
          li: a(href="#auth_geta") Get Access Token
          li: a(href="#auth_request") Api Request Auth
      li
        a(href="#transactions") Transactions
        ul
          li: a(href="#transaction_find") Find
          li: a(href="#transaction_get") Get
          li: a(href="#transaction_create") Create
          li: a(href="#transaction_update") Update
          li: a(href="#transaction_void") Void
      li
        a(href="#purchases") Purchases
        ul
          li: a(href="#purchase_find") Find
          li: a(href="#purchase_get") Get
          li: a(href="#purchase_create") Create
          li: a(href="#purchase_update") Update
          li: a(href="#purchase_void") Delete
      //- li
      //-   a(href="#customers") Customers
      //-   ul
      //-     li: a(href="#customer_find") Find
      //-     li: a(href="#customer_get") Get
      //-     li: a(href="#customer_create") Create
      //-     li: a(href="#customer_update") Update
      //-     li: a(href="#customer_card") Add Card
      //-     li: a(href="#customer_close") Close
      //-     li: a(href="#customer_remove") Remove
      //- li
      //-   a(href="#plan") Plans
      //-   ul
      //-     li: a(href="#plan_find") Find
      //-     li: a(href="#plan_get") Get
      //-     li: a(href="#plan_create") Create
      //-     li: a(href="#plan_update") Update
      //-     li: a(href="#plan_remove") Remove
      //- li
      //-   a(href="#subscription") Subscriptions
      //-   ul
      //-     li: a(href="#subscription_get") Get
      //-     li: a(href="#subscription_create") Create
      //-     li: a(href="#subscription_update") Update
      //-     li: a(href="#subscription_remove") Remove
  
  article#auth
    h1 Authorization

    article#auth_overview
      h2 Overview
      p Authorization is handled via OAuth 1A standards.  The authorization process consists of 2 requests. First you must get a request token and then an access token. The access token can be used for all subsequent calls to the services.

    article#auth_getr
      h2 Get Request Token
      h3 Request
      pre: code.method.
        POST https://api.pps.io/v1/OAuth/1A/RequestToken HTTP/1.1
        Authorization: OAuth oauth_consumer_key="00000000-0000-0000-0000-000000000000",
                             oauth_nonce="0YhM7uEp",
                             oauth_signature_method="HMAC-SHA1",
                             oauth_signature="N3245RcYzkY01yQsgB1fqIlF4cY%3D",
                             oauth_version="1.0",
                             oauth_timestamp="1344019030"
        Accept: application/x-www-form-urlencoded

      h3 Response
      pre: code.method.
        HTTP/1.1 200 OK
        Content-Type: application/x-www-form-urlencoded

        oauth_token=660b21b4-d3ee-4ce1-84f5-a3ec8c52ea42&oauth_token_secret=dea7c4de-f346-403f-962c-181ae8338800

    article#auth_geta
      h2 Get Access Token
      h3 Request
      pre: code.method.
        POST https://api.pps.io/v1/OAuth/1A/AccessToken HTTP/1.1
        Authorization: OAuth oauth_token="4499eddf-2633-415a-b221-90cbf7823dce",
                             oauth_consumer_key="00000000-0000-0000-0000-000000000000",
                             oauth_nonce="vYXqb3Jq",
                             oauth_signature_method="HMAC-SHA1",
                             oauth_signature="%2FUeW4NTL4NV88XOYPAKr3ANGn7A%3D",
                             oauth_version="1.0",
                             oauth_timestamp="1344019030"
        Accept: application/x-www-form-urlencoded

      h3 Response
      pre: code.method.
        HTTP/1.1 200 OK
        Content-Type: application/x-www-form-urlencoded

        oauth_token=d7874463-b31b-4851-be5f-bcea985f895d&oauth_token_secret=19142a9a-f2fb-4c72-8238-80b63645aba5

    article#auth_request
      h2 Api Request Auth
      p Every request that is sent to the API will be accompanied with the proper auth.  This will consist of several parameters added to the querystring.
      dl
        dt oauth_token 
        dd the previously acquired token
        dt oauth_consumer_key
        dd this is the public key for the consumer account being used for the request
        dt oauth_nonce
        dd a unique string that can only be used once per request
        dt oauth_signature_method
        dd this should be set to: HMAC-SHA1 
        dt oauth_signature
        dd the signature is a hash of the entire request and consumer secret
        dt oauth_version
        dd this should be set to: 1.0
        dt oauth_timestamp
        dd the unix timestamp defining when the request was sent


  article#transactions
    h1 Transactions
    p Transactions are the overall container for most of the other objects.
    
    h2 Routes Overview
    pre: code.method.
      GET     /transaction                // get all transactions
      POST    /transaction                // create new transaction
      GET     /transaction/:id            // get transaction by id
      PUT     /transaction/:id            // update transaction by id
      DELETE  /transaction/:id            // void a transaction
    
    h2 Properties
    p Complete list of available properties when getting a transaction:
    pre: code.
      (String)  id
      (Object)  customer
      (Array)   purchases
      (Array)   coupons
      (Array)   payments
      (Object)  plan
      (Number)  subTotalAmount
      (Number)  taxAmount
      (Number)  shipAmount
      (Number)  totalAmount
      (Number)  tipAmount
      (String)  currency
      (Number)  balance
      (String)  referenceNumber
      (Object)  metaData
    
    article#transaction_find
      h2 Find
      pre: code.method.
        GET /transaction
        GET /transaction?referenceNumber=1244567
        GET /transaction?offset=50&limit=25
      p Get a list of transactions, with optional filter and paging parameters.
    
    article#transaction_get
      h2 Get
      pre: code.method.
        GET /transaction/:id
      p Find a transaction using its id.
    
    article#transaction_create
      h2 Create
      pre: code.method POST /transaction
      p Create a new transaction with given parameters.
      h3 Parameters
      pre: code.
        (String)  id
        (Object)  customer
        (Array)   purchases
        (Array)   coupons
        (Array)   payments
        (Object)  plan
        (Number)  subTotalAmount
        (Number)  taxAmount
        (Number)  shipAmount
        (Number)  totalAmount
        (Number)  tipAmount
        (String)  currency
        (Number)  balance
        (String)  referenceNumber
        (Object)  metaData
    
    article#transaction_update
      h2 Update
      pre: code.method PUT /transaction/:id
      p Update a transaction using its id.

    article#transaction_void
      h2 Void
      pre: code.method DELETE /transactions/:id
      p Voids a previously authorized transaction. A transaction cannot be voided if it has already been settled.



  article#purchases
    h1 Purchases
    p Purchases are items that are purchased as part of a transaction.
    
    h2 Routes Overview
    pre: code.method.
      GET     /purchase                // get all purchases
      POST    /purchase                // create new purchase
      GET     /purchase/:id            // get purchase by id
      PUT     /purchase/:id            // update purchase by id
      DELETE  /purchase/:id            // delete a purchase
    
    h2 Properties
    p Complete list of available properties when getting a purchase:
    pre: code.
      (String)  id
      (String)  name
      (Number)  price
      (String)  currency
      (Boolean) shipped
      (String)  trackingNumber
      (Array)   coupons
      (Array)   taxes
    
    article#purchase_find
      h2 Find
      pre: code.method.
        GET /purchase
        GET /purchase?name=Red%20Ball
        GET /purchase?offset=50&limit=25
      p Get a list of purchases, with optional filter and paging parameters.
    
    article#purchase_get
      h2 Get
      pre: code.method GET /purchase/:id
      p Find a purchase using its id.
    
    article#purchase_create
      h2 Create
      pre: code.method POST /purchase
      p Create a new puchase with given parameters.
      h3 Parameters
      pre: code.
        (String)  id
        (String)  name
        (Number)  price
        (String)  currency
        (Boolean) shipped
        (String)  trackingNumber
        (Array)   coupons
        (Array)   taxes

    article#purchase_update
      h2 Update
      pre: code.method PUT /purchase/:id
      p Update a purchase using its id.

    article#purchase_delete
      h2 Delete
      pre: code.method PUT /purchase/:id
      p Delete a purchase using its id.


  //- article#customers
  //-   h1 Customers
  //-   p Customers will handle customers' saved info in the API. Customers will be able to have saved payment types, coupons, plans, and subscriptions. Payment types can be sent at creation or through updates.
    
  //-   h2 Routes Overview
  //-   pre: code.method.
  //-     GET /customer                       // get all customers with optional filters
  //-     POST /customer                      // create new customer
  //-     GET /customer/:id                   // get customer by id
  //-     PUT /customer/:id                   // update customer by id
  //-     PUT /customer/:id/close             // close customer account by id
  //-     DELETE /customer/:id                // delete customer by id
  //-     POST /customer/:id/card             // create a new card
  //-     DELETE /customer/:id/card/:cardId   // delete customer's card by id
  //-     GET /customer/:id/transactions      // get transactions for customer
  //-     GET /customer/:id/subscriptions     // get subscriptions for customer
    
  //-   h2 Properties
  //-   p Complete list of available properties when retrieving a customer:
  //-   pre: code.
  //-     - (guid) id:                    *the ID of the customer in the PPS database*
  //-     - (String) customId:            *an identifier for the customer in the merchant's system (optional, set when creating the customer)*
  //-     - (String) firstName
  //-     - (String) lastName
  //-     - (String) note
  //-     - (Integer) transactionCount:   *just a count of all transactions for this customer, details can be found by calling `GET /customers/:id/transactions`*
  //-     - (Object) billingAddress:      *optionally, instead of having a billing and shipping address, we could just have an array of addresses for a customer*
  //-       - (String) street
  //-       - (String) streetExtended
  //-       - (String) city
  //-       - (String) state:             *maybe "city/state" could be changed to "locality/region" for non-US customers*
  //-       - (String) postalCode
  //-       - (String) country
  //-     - (Object) shippingAddress
  //-       - (String) street
  //-       - (String) streetExtended
  //-       - (String) city   
  //-       - (String) state:             *maybe "city/state" could be changed to "locality/region" for non-US customers*
  //-       - (String) postalCode
  //-       - (String) country
  //-     - (String) email:               *this could potentially be an array of emails as well*
  //-     - (String) phoneNumber:         *this could potentially be an array of phone numbers as well*
  //-     - (Array) payments:             *array of cards on file for this customer. this design does not currently consider storing anything other than credit cards for a customer.*
  //-       - (String) id
  //-       - (String) name
  //-       - (String) token:             *unique token for each card/customer combination*
  //-       - (String) hash:              *hash of the card number; used, for example, to distinguish if the same card is used by 2 customers without actually knowing the card number*
  //-       - (String) last4:             *last 4 digits of card number*
  //-       - (String) bin:               *first 6 digits of card number*
  //-       - (String) expiration_month
  //-       - (String) expiration_year
  //-       - (Boolean) default:          *whether this is the default card to use for new transactions*
  //-       - (Object) address:           *optional, the address associated with this card. by default it will use the billing address for the customer*
    
  //-   article#customer_find
  //-     h2 Find
  //-     pre: code.method GET /customer
  //-     p Get a list of customers, with optional filter parameters.
    
  //-   article#customer_get
  //-     h2 Get
    
  //-   article#customer_create
  //-     h2 Create
  //-     pre: code.method POST /customer
  //-     p Create a new PPS customer object. Takes any of the parameters listed above except for the payments array, which are created through a separate API call (below).
  //-     h3 Example Request Body
  //-     pre: code.js.
  //-       {
  //-         firstName: "David",
  //-         lastName: "Becher",
  //-         id: "abc123", // custom ID specific to our application
  //-         email: "david@skookum.com",
  //-         billingAddress: {
  //-           street: '121 W Trade St',
  //-           city: 'Charlotte',
  //-           state: 'NC',
  //-           postalCode: 28202,
  //-           country: 'United States of America'
  //-         }
  //-       }
    
  //-   article#customer_update
  //-     h2 Update
  //-     pre: code.method PUT /customer/:id
  //-     p Update a PPS customer object. Parameters in the body are the same as the create method. Any parameters that are not sent are not updated.
    
  //-   article#customer_card
  //-     h2 Add Card
  //-     pre: code.method POST /customer/:id/card
  //-     p Create a new card for a customer. Note that this method takes several parameters that are not ever returned by the API again (by design). Calling this method would add an item to the payments array for a customer.
  //-     h3 Example request body
  //-     pre: code.js.
  //-       {
  //-         number: '378282246310005',
  //-         cvv: '123',
  //-         expiration_month: '06',
  //-         expiration_year: '2016',
  //-         address: { // this field is optional, and will default to the customer's billing address
  //-           street: '121 W Trade St',
  //-           city: 'Charlotte',
  //-           state: 'NC',
  //-           postalCode: '28202',
  //-           country: 'United States of America'
  //-         },
  //-         default: true // optional, if true it will make this card the default and set all other cards to default: false.
  //-       }
  //-     h3 Example Response
  //-     pre: code.js.
  //-       {
  //-         id: 'abc123',
  //-         token: 'kjshfgsjlkfh',
  //-         hash: 'sdlkjfhsdkj',
  //-         last4: '0005',
  //-         bin: '378282',
  //-         expiration_month: '06',
  //-         expiration_year: '2016',
  //-         address: {
  //-           street: '121 W Trade St',
  //-           city: 'Charlotte',
  //-           state: 'NC',
  //-           postalCode: '28202',
  //-           country: 'United States of America'
  //-         }
  //-       }
    
  //-   article#customer_close
  //-     h2 Close
  //-     pre: code.method PUT /customer/:id/close
  //-     p This will close an account but not remove it.
    
  //-   article#customer_remove
  //-     h2 Remove
  //-     pre: code.method DELETE /customer/:id
  //-     p Remove account completely from PPS (including payment information).
  

  //- article#plan
  //-   h1 Plans
  //-   p Plans are preset transactions that will generally be used for recurring billing. The customer's account object can be tied to a recurring plan that will be billed at set increments.
    
  //-   h2 Routes Overview
  //-   pre: code.method.
  //-     GET /plan                         // get all plans
  //-     POST /plan                        // create new plan
  //-     GET /plan/:id                     // get plan by id
  //-     PUT /plan/:id                     // update plan by id
  //-     DELETE /plan/:id                  // delete plan by id
  //-     GET /plan/:id/accounts            // get accounts for plan
    
  //-   h2 Properties
  //-   p List of available properties for a plan.
  //-   pre: code.
  //-     - (String) name
  //-     - (String) code
  //-     - (String) description
  //-     - (Number) cost
  //-     - (Object) intialFees
  //-       - (Number) setup
  //-     - (Object) interval     *length of time for each recurring invoice (1 month, etc)*
  //-       - (String) unit
  //-       - (Number) quantity
  //-     - (Object) trial
  //-       - (String) unit
  //-       - (Number) quantity
        
  //-   article#plan_find
  //-     h2 Find
  //-     pre: code.method.
  //-       GET /plan
  //-       GET /plan?name=Expert
  //-     p Get a list of plans, with optional filter parameters.
    
  //-   article#plan_get
  //-     h2 Get
  //-     pre: code.method GET /plan/:id
  //-     p Find a specific plan using its id
    
  //-   article#plan_create
  //-     h2 Create
  //-     pre: code.method POST /plan
  //-     p Create a new plan
    
  //-   article#plan_update
  //-     h2 Update
  //-     pre: code.method PUT /plan/:id
  //-     p Update a plan by ID.
    
  //-   article#plan_remove
  //-     h2 Remove
  //-     pre: code.method DELETE /plan/:id
  //-     p Remove a plan. This disallows any further customers from signing up for the plan, but does not remove it from any current subscriptions.
  
  //- article#subscription
  //-   h1 Subscriptions
  //-   p Subscription are objects that tie accounts and plans together. They denote a recurring billing cycle a customer has with a particular plan.
    
  //-   h2 Routes Overview
  //-   pre: code.method.
  //-     GET /subscription                      // get all subscriptions
  //-     POST /subscription                     // create new subscription
  //-     GET /subscription/:id                  // get subscription by id
  //-     PUT /subscription/:id                  // update subscription by id
  //-     DELETE /subscription/:id               // cancel subscription by id
    
  //-   h2 Properties
  //-   p List of available properties for a subscription.
  //-   pre: code.
  //-     - (guid) customer                    *the ID of the customer in the PPS database*
  //-     - (String) plan
  //-     - (Date) activated
  //-     - (Date) renews
  //-     - (Date) expires
  //-     - (Boolean) active
  //-     - (Number) quantity
  //-     - (Object) currentPeriod
  //-       - (Date) started
  //-       - (Date) ends
  //-     - (Object) trialPeriod
  //-       - (Date) started
  //-       - (Date) ends
    
  //-   article#subscription_get
  //-     h2 Get
  //-     pre: code.method GET /subscription/:id
  //-     p Find a specific subscription using its id
    
  //-   article#subscription_create
  //-     h2 Create
  //-     pre: code.method POST /subscription
  //-     p Create a new subscription.
    
  //-   article#subscription_update
  //-     h2 Update
  //-     pre: code.method PUT /subscription/:id
  //-     p Update an existing subscription. The following parameters can be updated:
  //-     ul
  //-       li plan
  //-       li active
  //-       li quantity
    
  //-   article#subscription_remove
  //-     h2 Remove
  //-     pre: code.method DELETE /subscription/:id
  //-     p Remove a subscription.

block scripts
  script
    $('body').scrollspy()
